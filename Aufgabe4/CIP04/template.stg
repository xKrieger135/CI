group template;
sums(uebergabeConstraint,uebergabeBuchstaben) ::= <<

package puzzleSolver;

import choco.Choco;
import choco.Options;
import choco.cp.model.CPModel;
import choco.cp.solver.CPSolver;
import choco.kernel.model.Model;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.solver.Solver;
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;

public class PuzzleSolver {

    private static Model model = new CPModel();
    private static int uniqueNo = 0;
    private static int getUniqueNo(){
        return uniqueNo++;
    }
    private static void addEqualsConstraint(Model model, IntegerVariable x, IntegerVariable y, IntegerVariable u_in, IntegerVariable u_out, IntegerVariable z) {
        model.addConstraint(Choco.eq(Choco.plus(x, Choco.plus(y, u_in)), Choco.plus(z, Choco.mult(u_out, 10))));
    }
    
    private static void addConstraintLine(List\<IntegerVariable> ersteswort, List\<IntegerVariable> zweiteswort, List\<IntegerVariable> ergebniswort){
    
        ListIterator\<IntegerVariable> itErsteswort = ersteswort.listIterator(ersteswort.size());
        ListIterator\<IntegerVariable> itZweiteswort = zweiteswort.listIterator(zweiteswort.size());
        ListIterator\<IntegerVariable> itErgebniswort = ergebniswort.listIterator(ergebniswort.size());
        
        IntegerVariable zero = Choco.makeIntVar("ZERO", 0, 0, Options.V_ENUM);
        IntegerVariable u_in = zero;
        IntegerVariable u_out = Choco.makeIntVar("u" + getUniqueNo(), 0, 1, Options.V_ENUM);
        
        while (itErsteswort.hasPrevious() || itZweiteswort.hasPrevious()){
            addEqualsConstraint(model, 
                    itSum1.hasPrevious() ? itSum1.previous() : zero, 
                    itSum2.hasPrevious() ? itSum2.previous() : zero, 
                    u_in,
                    u_out, 
                    itErg.hasPrevious() ? itErg.previous() : zero
            );
            u_in = u_out;
            u_out = Choco.makeIntVar("u" + getUniqueNo(), 0, 1, Options.V_ENUM);
        }
        
        if(itErg.hasPrevious()){
            Choco.eq(itErg.previous(), u_in);
        }else{
            Choco.eq(zero, u_in);
        }
    }
    public static void main(String[] args) {
        
        /*
    	 * Hier wird jeder Buchstabe als Variable deklariert.
    	 */ 
    	 
        <uebergabeBuchstaben: { buchstabe | IntegerVariable < buchstabe > = Choco.makeIntVar("<buchstabe>", 0, 9, Options.V_ENUM);<\n> }>

		/*
		 * Prüfe ob alle übergabeBuchstaben verschieden sind. (wie in aufgabe 3b)
		 */
	 
        model.addConstraint(Choco.allDifferent( < uebergabeBuchstaben; separator = ", " >));
        <uebergabeConstraint; separator = "\n\n" >
        
        /*
         * Erstellen des Solvers. Ebenfalls wird das Model mit den ganzen schmock eingelesen und dann gelöst.
         */ 
         
        Solver s = new CPSolver();
        s.read(model);
        boolean result = s.solve();
        
        if (result) {
            <uebergabeBuchstaben:{buchstabe| System.out.println("<buchstabe> = " + s.getVar(<buchstabe>).getVal()); <\n>} >
            

        } else {
            System.err.println("ERROR!");
        }
    }
}

>>

sum(ersteswort, zweiteswort, ergebniswort) ::= <<

addConstraintLine(
                Arrays.asList(<ersteswort.characters; separator=", ">), 
                Arrays.asList(<zweiteswort.characters; separator=", ">),
                Arrays.asList(<ergebniswort.characters; separator=", ">)
        );
        
>>

