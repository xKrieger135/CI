group template;
sums(uebergabeConstraint,uebergabeBuchstaben) ::= <<

package PuzzleSolver;

import choco.Choco;
import choco.Options;
import choco.cp.model.CPModel;
import choco.cp.solver.CPSolver;
import choco.kernel.model.Model;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.solver.Solver;
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;

public class PuzzleSolver {

    private static Model model = new CPModel();
    private static int uniqueNo = 0;
    private static int getUniqueNo(){
        return uniqueNo++;
    }
    private static void addEqualsConstraint(Model model, IntegerVariable erstesWortNumber, IntegerVariable zweitesWortNumber, IntegerVariable carryZero, IntegerVariable carryOne, IntegerVariable ergebnisWortNumber) {
        model.addConstraint(Choco.eq(Choco.plus(erstesWortNumber, Choco.plus(zweitesWortNumber, carryZero)), Choco.plus(ergebnisWortNumber, Choco.mult(carryOne, 10))));
        System.out.println(ergebnisWortNumber.getName() + " = " + erstesWortNumber.getName() + " + " + zweitesWortNumber.getName());
    }
    
    private static void addConstraint(List\<IntegerVariable> ersteswort, List\<IntegerVariable> zweiteswort, List\<IntegerVariable> ergebniswort){
    
        IntegerVariable zero = Choco.makeIntVar("ZERO", 0, 0, Options.V_ENUM);
        IntegerVariable carryZero = zero;
        IntegerVariable carryOne = Choco.makeIntVar("u" + getUniqueNo(), 0, 1, Options.V_ENUM);
        
        // Delta Variablen zeigen den Größenunterschied zu dem Ergebnis
		int delta1 = ergebniswort.size()-ersteswort.size();
        int delta2 = ergebniswort.size()-zweiteswort.size();
        int e = ergebniswort.size();
        
        for(int i = ergebniswort.size()-1; i\>=0; i--) {
        	// wort.get wird aufgerufen solange das wort noch zeichen hat (von hinten nach vorne)
        	// Die Deltavariablen sind dazu da um den Index des ergebnisses auf das Wort zu mappen
        	// Wenn ein wort kein zeichen mehr hat wird zero eingefügt.
			addEqualsConstraint(model, 
					ersteswort.size() \< e-i ? zero : ersteswort.get(i-delta1),
					zweiteswort.size() \< e-i ? zero : zweiteswort.get(i-delta2),
					carryZero,
					carryOne,
					ergebniswort.get(i));
					
					carryZero = carryOne;
        			carryOne = Choco.makeIntVar("u" + getUniqueNo(), 0, 1, Options.V_ENUM);
					
		}
		
		carryZero = carryOne;
        carryOne = Choco.makeIntVar("u" + getUniqueNo(), 0, 1, Options.V_ENUM);
        
        if((ergebniswort.size() \> ersteswort.size()) || (ergebniswort.size() \> zweiteswort.size())){
            Choco.eq(ergebniswort.get(0), carryZero);
        }else{
            Choco.eq(zero, carryZero);
        }

    }
    public static void main(String[] args) {
        
        /*
    	 * Hier wird jeder Buchstabe als Variable deklariert.
    	 */ 
    	 
        <uebergabeBuchstaben: { buchstabe | IntegerVariable < buchstabe > = Choco.makeIntVar("<buchstabe>", 0, 9, Options.V_ENUM);<\n> }>

		/*
		 * Prüfe ob alle übergabeBuchstaben verschieden sind. (wie in aufgabe 3b)
		 */
	 
        model.addConstraint(Choco.allDifferent( < uebergabeBuchstaben; separator = ", " >));
        <uebergabeConstraint; separator = "\n\n" >
        
        /*
         * Erstellen des Solvers. Ebenfalls wird das Model mit den ganzen schmock eingelesen und dann gelöst.
         */ 
         
        Solver s = new CPSolver();
        s.read(model);
        boolean result = s.solve();
        
        if (result) {
            <uebergabeBuchstaben:{buchstabe| System.out.println("<buchstabe> = " + s.getVar(<buchstabe>).getVal()); <\n>} >
            

        } else {
            System.err.println("Couldn't solve this shit! What do you give me there?!");
        }
    }
}

>>

sum(ersteswort, zweiteswort, ergebniswort) ::= <<

addConstraint(
                Arrays.asList(<ersteswort.characters; separator=", ">), 
                Arrays.asList(<zweiteswort.characters; separator=", ">),
                Arrays.asList(<ergebniswort.characters; separator=", ">)
        );
        
>>

